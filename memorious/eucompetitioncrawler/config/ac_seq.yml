name: competition1_seq

description: "Antitrusts/Cartels cases with generated sequential case ids"

stealthy: False

pipeline:

  init:
    # systematically generate a sequence of case IDs, starting from a recent one and
    # going down
    method: sequence
    params:
      start: 40632
      step: -1
      stop : 28841
    handle:
      pass: seed

  seed:
    method: seed
    params:
      url: https://ec.europa.eu/competition/elojade/isef/case_details.cfm?proc_code=1_%(number)s
    handle:
      pass: fetch

  fetch:
    method: fetch
    params:
      # only fetch web (html, xml, text) and documents (doc, pdf etc)
      rules:
        or:
          - mime_group: documents
          - mime_group: web
    handle:
      pass: clean

  clean:
    # clean HTML before storing : get rid of menu bars etc
    method: clean_html
    params:
      remove_paths:
        # 1. For the EC competition website:
        # header and menu bars
        - './/div[@id="header"]'
        - './/div[@id="path"]'
        - './/div[@id="top_menu"]'
        # left menu
        - './/td[@id="left_menu"]/table'
        # footer of the content section
        - './/center[a[@href="./index.cfm"]]'
        - './/p[a[@href="/competition/cases/manual.html"]]'
        # page footer
        - './/div[div[@id="footer"]]'
        # TODO : delete td[@id="left_menu"] ?
        # 2. For the EUR-Lex website
        - './/header[@id="op-header"]'
        - './/div[@class="NavSearch"]'
        - './/div[@class="SiteBreadcrumb"]'
        - './/div[@class="AffixSidebarWrapper"]'
        - './/footer[@class="clearfix"]'
        - './/div[@id="cookie-consent-banner"]'
        - './/div[@id="myModal"]'
    handle:
      pass: parse

  parse:
    # use our custom method to extract structured metadata from the case details page
    method: eucompetitioncrawler.case_details:parse_competition
    params:
      # only store web and documents ; currently redundant with fetch params
      store:
        # FIXME find a way to avoid storing "procedure doesn't exist" pages
        and:
          - or:
              - mime_group: documents
              - mime_group: web
          - not:
              pattern: 'https://ec.europa.eu/competition/elojade/isef/index.cfm.*'
      include_paths:
        # 1. EC competition website
        # explicitly select the elements containing our links of interest ;
        # this conveniently excludes the menu bars (top, left...), but also avoids
        # following the "new search" link on the "procedure doesn't exist" pages
        #
        # 1.1. Case page
        # 1.1.1. Recurse on links for "Companies" and "Economic Activities"
        - './/td[@class="ClassTextDetail"]'
        # 1.1.2. Recurse on links for "Events"
        # TODO we currently can't define a path that only follows links in certain languages
        # eg. "en" or "fr" or "Multilingual"
        - './/table[@class="events"]'
        #
        # 1.2. Search results page (eg. after following a link on an Economic Activity)
        # 1.2.1. Recurse on links to cases
        - './/td[@class="case"]'
        #
        # 2. EUR-Lex : the previous xpath does not exist in its HTML structure, and we
        #Â currently abstain from defining any xpath that might be found, because we don't
        # want the crawler to recurse on the EUR-Lex website ; the page in the default
        # language (English) is stored as is
        #
        # 3. EC Press corner : does not really work because the landing page is empty,
        # the content is retrieved through javascript calls to an API or something
      meta:
        title: './/div[@id="BodyContent"]/p/span/strong'
        policy: './/h2'
    handle:
      fetch: fetch
      store: store

#  debug:
#    method: inspect

  store:
    # store the crawled documents to a directory
    # method: directory
    # params:
    #   path: '/data/results'
    # store the crawled documents into an Aleph dataset
    method: aleph_emit
    params:
      collection: antitrust_cartels_seq
